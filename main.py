import telebot
from telebot import types
import os

token = os.environ["TOKEN"]

bot = telebot.TeleBot(token)

room_spectators = []
guest_id = None
host_id = None

activity_first_q = False
activity_second_q = False
activity_interview_started = False

class Question:
    def __init__(self, id, question, answer=None):
        self.id = id
        self.text = question
        self.answer = answer

class User:
    def __init__(self, id, first_name, last_name, first_q=None, second_q=None):
        self.id = id
        self.first_name = first_name
        self.last_name = last_name
        self.first_q = first_q
        self.second_q = second_q

questions = [
    Question(1, "–ö–∞–∫ –±—ã —Ç—ã –∫–æ—Ä–æ—Ç–∫–æ –æ–ø–∏—Å–∞–ª —Å–µ–±—è?"),
    Question(2, "–ö–µ–º —Ç—ã –º–µ—á—Ç–∞–ª —Å—Ç–∞—Ç—å –≤ –¥–µ—Ç—Å—Ç–≤–µ?"),
    Question(3, "–ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è —Ç–∞–ª–∞–Ω—Ç –∏–ª–∏ –Ω–∞–≤—ã–∫, –∫–æ—Ç–æ—Ä—ã–º —Ç—ã –≥–æ—Ä–¥–∏—à—å—Å—è?"),
    Question(4, "–ö–∞–∫–∏–µ —É —Ç–µ–±—è –µ—Å—Ç—å —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –ø–æ —Ç–≤–æ–µ–º—É –º–Ω–µ–Ω–∏—é?"),
    Question(5, "–ß—Ç–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª —É–ª—É—á—à–∏—Ç—å –≤ —Å–µ–±–µ?"),
    Question(6, "–ö–∞–∫ —Ç—ã —Å–ø—Ä–∞–≤–ª—è–µ—à—å—Å—è —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º –≤ –Ω–∞–ø—Ä—è–∂—ë–Ω–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö?"),
    Question(7, "–ö–∞–∫ —Ç—ã –æ–±—ã—á–Ω–æ –ø—Ä–æ–≤–æ–¥–∏—à—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è?"),
    Question(8, "–ß—Ç–æ —Ç–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –≤ –ª—é–¥—è—Ö?"),
    Question(9, "–ö–∞–∫–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –≤ —Å–≤–æ–∏—Ö –¥—Ä—É–∑—å—è—Ö —Ç—ã —Ü–µ–Ω–∏—à—å?"),
    Question(10, "–ù—Ä–∞–≤–∏—Ç—Å—è –ª–∏ —Ç–µ–±–µ —É—á—ë–±–∞ –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ?"),
    Question(11, "–ö–∞–∫ —Ç—ã –æ—Ç–Ω–æ—Å–∏—à—å—Å—è –∫ —Å–æ—Å–µ–¥—è–º –≤ –æ–±—â–µ–∂–∏—Ç–∏–∏?"),
    Question(12, "–ö –∫–æ–º—É –∏–∑ –¥—Ä—É–∑–µ–π —Ç—ã –∏—Å–ø—ã—Ç—ã–≤–∞–µ—à—å –Ω–∞–∏–±–æ–ª—å—à–µ–µ —É–≤–∞–∂–µ–Ω–∏–µ?"),
    Question(13, "–ß—Ç–æ —Ç–µ–±—è –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç –≤ —Ç–≤–æ–µ–π –¥–µ–≤—É—à–∫–µ?"),
    Question(14, "–ö–∞–∫ —Ç—ã –¥—É–º–∞–µ—à—å, –∫—Ç–æ –æ–∫–∞–∑–∞–ª –Ω–∞ —Ç–µ–±—è –Ω–∞–∏–±–æ–ª—å—à–µ–µ –≤–ª–∏—è–Ω–∏–µ?"),
    Question(15, "–ù–∞ –∫–∞–∫–æ–º –º—É–∑—ã–∫–∞–ª—å–Ω–æ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ —Ç–µ–±–µ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –Ω—Ä–∞–≤–∏—Ç—Å—è –∏–≥—Ä–∞—Ç—å?"),
    Question(16, "–ù–∞ –∫–∞–∫–æ–º –º—É–∑—ã–∫–∞–ª—å–Ω–æ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ —Ç—ã –ª—É—á—à–µ –≤—Å–µ–≥–æ –∏–≥—Ä–∞–µ—à—å –ø–æ —Ç–≤–æ–µ–º—É –º–Ω–µ–Ω–∏—é?"),
    Question(17, "–ï—Å–ª–∏ –±—ã —Ç—ã –º–æ–≥ –∏–∑–º–µ–Ω–∏—Ç—å —á—Ç–æ-—Ç–æ –≤ —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏ –≤ –ø—Ä–æ—à–ª–æ–º, —á—Ç–æ –±—ã —ç—Ç–æ –±—ã–ª–æ?"),
    Question(18, "–í –∫–∞–∫–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ —Ç—ã –±—ã —Ö–æ—Ç–µ–ª —Ä–∞–±–æ—Ç–∞—Ç—å?"),
    Question(19, "–ß—Ç–æ –¥–ª—è —Ç–µ–±—è –≤–∞–∂–Ω–µ–µ –≤—Å–µ–≥–æ –≤ –∂–∏–∑–Ω–∏?"),
    Question(20, "–ö–∞–∫–∏–µ –ø–ª–∞–Ω—ã —É —Ç–µ–±—è –Ω–∞ –±–ª–∏–∂–∞–π—à–µ–µ –±—É–¥—É—â–µ–µ?")
]


@bot.message_handler(commands=['start'])
def handle_start(message):
    if check_user(message.chat.id) == 4:
        print(f"{message.chat.first_name} –≤–æ—à—ë–ª –≤ –±–æ—Ç (/start)")
        bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç, {message.chat.first_name}! –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã (—É–∑–Ω–∞–π –µ–≥–æ —É –Æ—Ä—ã):")


@bot.message_handler(commands=['log_ok_log'])
def handle_log(message):
   global guest_id, host_id, room_spectators
   room_spec_str = "room_spectators:\n"
   count = 0
   for i in room_spectators:
       count += 1
       room_spec_str += f"{count}. {i.first_name} {i.last_name} ({i.id})\n"
   bot.send_message(message.chat.id, room_spec_str)
   bot.send_message(message.chat.id, f"guest_id: {guest_id}")
   bot.send_message(message.chat.id, f"host_id: {host_id}")


@bot.message_handler(commands=['thanks']) 
def handle_thanks(message):
    global guest_id, host_id, room_spectators
    if check_user(message.chat.id) == 3:
        for i in room_spectators:
            bot.send_message(i.id, f"–°–ø–∞—Å–∏–±–æ —Ç–µ–±–µ –±–æ–ª—å—à–æ–µ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, {i.first_name}!")
            bot.send_message(i.id, f"–ë–æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω @nippyfox –ø—Ä–∏ –ø–æ–º–æ—â–∏ üíª, ‚úãüèª –∏ üíñ")
        if host_id is not None:
            bot.send_message(host_id, f"–°–ø–∞—Å–∏–±–æ —Ç–µ–±–µ –±–æ–ª—å—à–æ–µ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, —à–æ–Ω–∏—á!")
            bot.send_message(host_id, f"–ë–æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω @nippyfox –ø—Ä–∏ –ø–æ–º–æ—â–∏ üíª, ‚úãüèª –∏ üíñ")
        if guest_id is not None:
            bot.send_message(guest_id, f"–°–ø–∞—Å–∏–±–æ —Ç–µ–±–µ –±–æ–ª—å—à–æ–µ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, {message.chat.first_name}!")
            bot.send_message(guest_id, f"–ë–æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω @nippyfox –ø—Ä–∏ –ø–æ–º–æ—â–∏ üíª, ‚úãüèª –∏ üíñ")


@bot.message_handler(content_types="text")
def answer_for_msg(message):
    global guest_id, host_id, room_spectators, activity_first_q, activity_second_q, activity_interview_started
    if activity_first_q == False and activity_second_q == False and activity_interview_started == False:
        # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –Ω–∏ –≤ –æ–¥–Ω–æ–π –∏–∑ –∫–æ–º–Ω–∞—Ç
        if check_user(message.chat.id) == 4 and message.text == "54321":
            print(f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è {message.chat.first_name} {message.chat.last_name}")
            bot.send_message(message.chat.id, "–£—Ä–∞, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –†–∞—Å—Å–ª–∞–±—å—Å—è –∏ –∂–¥–∏ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —É–∫–∞–∑–∞–Ω–∏–π!üòâ")
            room_spectators.append(User(message.chat.id, message.chat.first_name, message.chat.last_name))
            print(f"–í spectators {len(room_spectators)} —á–µ–ª–æ–≤–µ–∫")
            
        # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—á–∞—é—â–µ–≥–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏–Ω—Ç–µ—Ä–≤—å—é
        if check_user(message.chat.id) == 4 and message.text == "nippyfox-admin":
            print("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –≥–æ—Å—Ç—å")
            start_guest_keyboard = types.InlineKeyboardMarkup(row_width=2)
            start_1st_button = types.InlineKeyboardButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="start_first")
            info_button = types.InlineKeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="check_roommates")
            start_guest_keyboard.add(start_1st_button, info_button)
            bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –≥–æ—Ç–æ–≤—å—Å—è –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å–∏–∫–∏!", reply_markup=start_guest_keyboard)
            guest_id = message.chat.id
            
        # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å—ã –∏–Ω—Ç–µ—Ä–≤—å—é
        if check_user(message.chat.id) == 4 and message.text == "host-room":
            print("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –≤–µ–¥—É—â–∏–π")
            bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –≥–æ—Ç–æ–≤—å—Å—è –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å–∏–∫–∏!")
            host_id = message.chat.id
    elif activity_first_q == True:
        if check_user(message.chat.id) == 1:
            new_answer_from_user = message.text
            user_id = message.chat.id
            for user in room_spectators:
                if user.id == user_id:
                    user.first_q.answer = new_answer_from_user
                    with open("log.txt", "a") as file:
                        file.write(f"\n\n{user.first_name} {user.last_name}\n{user.first_q.text}\n{new_answer_from_user}\n")
            bot.send_message(message.chat.id, "–¢–≤–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç!üòä")
            print(f"–ë—ã–ª –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç {message.chat.first_name} {message.chat.last_name}!")
        elif check_user(message.chat.id) == 3:
            count_first_q_not_none = 0
            for user in room_spectators:
                if user.first_q.answer is None:
                    count_first_q_not_none += 1
            bot.send_message(message.chat.id, f"–ú—ã –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç –æ—Ç {count_first_q_not_none} –∑—Ä–∏—Ç–µ–ª–µ–π")
    elif activity_second_q == True:
        if check_user(message.chat.id) == 1:
            new_answer_from_user = message.text
            user_id = message.chat.id
            for user in room_spectators:
                if user.id == user_id:
                    user.second_q.answer = new_answer_from_user
                    with open("log.txt", "a") as file:
                        file.write(f"\n\n{user.first_name} {user.last_name}\n{user.second_q.text}\n{new_answer_from_user}\n")
            bot.send_message(message.chat.id, "–¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –ø—Ä–∏–Ω—è—Ç—ã! –°–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µü•∞")
            print(f"–ë—ã–ª –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç {message.chat.first_name} {message.chat.last_name}!")
        elif check_user(message.chat.id) == 3:
            count_second_q_not_none = 0
            for user in room_spectators:
                if user.second_q.answer is None:
                    count_second_q_not_none += 1
            bot.send_message(message.chat.id, f"–ú—ã –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç –æ—Ç {count_second_q_not_none} –∑—Ä–∏—Ç–µ–ª–µ–π")
    elif activity_interview_started == True:
        if check_user(message.chat.id) == 3:
            if message.text in ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]:
                index = int(message.text) - 1
                bot.send_message(host_id, room_spectators[index].first_q.text)
                bot.send_message(guest_id, room_spectators[index].first_q.text)
                bot.send_message(guest_id, room_spectators[index].first_q.answer)
            elif message.text in ["11", "12", "13", "14", "15", "16", "17", "18", "19", "20"]:
                index = int(message.text) - 11
                bot.send_message(host_id, room_spectators[index].second_q.text)
                bot.send_message(guest_id, room_spectators[index].second_q.text)
                bot.send_message(guest_id, room_spectators[index].second_q.answer)


@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    global guest_id, room_spectators, questions, activity_first_q, activity_second_q, activity_interview_started

    if call.data == "start_first":
        activity_first_q = True
        count = 0

        for i in room_spectators:
            question = questions[count]
            bot.send_message(i.id, question.text)
            i.first_q = question
            count += 1

        start_2nd_guest_keyboard = types.InlineKeyboardMarkup()
        start_2nd_button = types.InlineKeyboardButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Ç–æ—Ä–æ–π", callback_data="start_second")
        start_2nd_guest_keyboard.add(start_2nd_button)
        bot.send_message(guest_id, "–ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞!", reply_markup=start_2nd_guest_keyboard)

    elif call.data == "start_second":
        count_1st_q_not_none = 0
        for user in room_spectators:
            if user.first_q.answer is None:
                count_1st_q_not_none += 1

        if count_1st_q_not_none == 0:
            activity_first_q = False
            activity_second_q = True

            count = 10

            for i in room_spectators:
                question = questions[count]
                bot.send_message(i.id, question.text)
                i.second_q = question
                count += 1

            start_pre_view_guest_keyboard = types.InlineKeyboardMarkup()
            start_view_button = types.InlineKeyboardButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é", callback_data="start_interview")
            start_pre_view_guest_keyboard.add(start_view_button)
            bot.send_message(guest_id, "–í—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞!", reply_markup=start_pre_view_guest_keyboard)
        else:
            bot.send_message(guest_id, "–ù–µ –≤—Å–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å!")
        
    elif call.data == "start_interview":
        count_2nd_q_not_none = 0
        for user in room_spectators:
            if user.second_q.answer is None:
                count_2nd_q_not_none += 1

        if count_2nd_q_not_none == 0:
            activity_second_q = False
            activity_interview_started = True

            print("–ü—Ä–∏—ë–º –æ—Ç–≤–µ—Ç–æ–≤ –∑–∞–≤–µ—à—ë–Ω. –ò–Ω—Ç–µ—Ä–≤—å—é –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!")
            if host_id is not None:
                bot.send_message(host_id, f"–ò–Ω—Ç–µ—Ä–≤—å—é –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! –¢–µ–ø–µ—Ä—å —Ç—ã –∑–∞–¥–∞—ë—à—å –≤–æ–ø—Ä–æ—Å—ã!")
            if guest_id is not None:
                bot.send_message(guest_id, f"–ò–Ω—Ç–µ—Ä–≤—å—é –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! –¢–µ–ø–µ—Ä—å —Ç—ã –æ—Ç–≤–µ—á–∞–µ—à—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã!")
        else:
            bot.send_message(guest_id, "–ù–µ –≤—Å–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å!")

    elif call.data == "check_roommates":
        res = "–í –∫–æ–º–Ω–∞—Ç–µ:\n"
        count = 0
        for i in room_spectators:
            count += 1
            res += f"{count}. {i.first_name} {i.last_name} ({i.id})\n"
        bot.send_message(guest_id, res)
    

def check_user(user_id):
    if any(user.id == user_id for user in room_spectators):
        return 1
    elif user_id == host_id:
        return 2
    elif user_id == guest_id:
        return 3
    else:
        return 4


if __name__=="__main__":
    bot.polling(none_stop=True)
